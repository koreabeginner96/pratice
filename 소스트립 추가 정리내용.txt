- head branch : 현재 작업중인 브랜치

- 작업을 사작하기전에는 pull을 항상 해줘야한다.
-  머지한후 브랜치 삭제 가능
## 충돌 해결 방법
- 에디터로 수작업으로 충돌부위 작업하기
- 오류난 파일 오른쪽 마우스이용하여  스테이지 올라가기전에 충돌 해결 내것으로 할지 저장소로 할것인지 선택후 커밋!
## reset 하는법
- SourceTree에서 이 커밋까지 현재 브랜치를 초기화 그중 되돌리기는 하드이다!
- 새로 작성 후 커밋 -> 그 뒤로 push 하기전에 기존(원격)에 올라와있는 commit 과 머지 후 push 하기
- 강제 푸시가 필요하다.터미널 명령어(git push --force)하면 원격에 저장되어있는 것 지워지고 새로 작성한걸로 바뀜(sourceTree에서는 강제 푸시를 지원하지 않는다.)
브랜치는 어떤기능을하는지 알아보게 하면좋다.(추천)
- push를 할떄 문제가 안생긴다.
- 혼자 작업 시 추천 방법

revert 연속 없애기
제일 최근것 커밋 클릭해서 리버트하고 그다음 순서에 맞는 리버트 순서에 맞게 제거 하기!
예 ddd 리버트 -> comm 리버트 ...
git bash 명령어  git revrt HEAD HEAD~1 
(ESc-> :wq)*2 반복

##긴급 main으로 돌아가는 방법
- 작업 중인 내용의 임시 저장
- 저장후 SourceTree 커밋 옵션(오른쪽하단)-> 마지막 커밋 정정

## Stash
- 다른 브랜치로 체크아웃하기 전에 현재 작업 내용을 저장하는 임시 저장 장소
- 유용하니 잘 사용해보자!
- SourceTree 상단에 스태시 가있다.-> 그후에 메인으로 나갈 수 있다.
- 왼쪽창 보면 원격아래 스태시가 저장 되어있다.
- 스태시 적용 하기(해당 스태시 오른쪽 마우스)
- 신규 파일이 경우 스테이지에 올린다음 스태시를 하면 된다.
- 다 사용 후 스태시 삭제 한다.

## Rebase 사용해보기
- 병합처럼 두 브랜치를 합칠 때 사용 한다.
- 현재 브랜치가 대상 브랜치 위로 올라 간다.
- SourceTree에서는 재배치 표현한다
- 장점: 커밋 히스토리가 깔끔하게 정리된다.
- 단점: 잘못하면 위험하다. 이미 원격 저장소에 올라간 경우+ 협업을 하고 있는 경우 특히 위험 하다.
## 기타 주의 사항
- 코드를 남기려고 주석을 달지 말자.
- 커밋 메시지를 잘 쓰자.
- 한가지 구현이 완료될떄마다 commit을 하자!
- 필요한 브랜치에 checkout 하기 -> rebase(재배치)할 자리에 우측클리하여 현재 변경사항을 ###에 제배치-> 충돌제거후 -> 스테이지 올리기-> 다시 현재 변경사항을 ###에 재배치


